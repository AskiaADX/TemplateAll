{%
'Dim headerColourPrimary =CurrentADC.PropValue("headerColourPrimary")
Dim headerFontColour =CurrentADC.PropValue("headerFontColour")

Dim controlAlign
Dim justifyContent

If (CurrentADC.PropValue("controlAlign") = "center" ) Then
    controlAlign = "0 auto 10px auto"
    justifyContent = "center"
ElseIf (CurrentADC.PropValue("controlAlign") = "right" ) Then
    controlAlign = "0 0 10px auto"
    justifyContent = "flex-end"
Else
    controlAlign = "0 auto 10px 0"
    justifyContent = "flex-start"
EndIf
%}

.down-point::after {
	content: '\2BC6';
  font-weight: bold;
  float: left;
	line-height: 1.02em;
  margin-right: 5px;
}

.right-point::after {
	content: "\2BC8";
  font-weight: bold;
	float: left;
  line-height: 1.02em;
  margin-right: 5px;
}

#adc_{%= CurrentADC.InstanceId %} div.askia-response-label {
  margin: 0;
}
#adc_{%= CurrentADC.InstanceId %} .responses-container {
  justify-content: {%= justifyContent %};
}

#adc_{%= CurrentADC.InstanceId %} .right-point {
	content: "\2BC8";
  font-weight: bold;
	float: left;
  line-height: 1.02em;
  margin-right: 5px;
}

#adc_{%= CurrentADC.InstanceId %} .down-point {
	content: '\2BC6';
  font-weight: bold;
  float: left;
	line-height: 1.02em;
  margin-right: 5px;
}

{% If (CurrentQuestion.Type = "numeric" or CurrentQuestion.Type = "numeric-loop" or CurrentQuestion.Type = "open" or CurrentQuestion.Type = "datetime" ) Then %}
#adc_{%= CurrentADC.InstanceId %} {
    text-align: {%= CurrentADC.PropValue("controlAlign") %};
}
{% EndIf %}
{% If ((CurrentQuestion.Type = "numeric" and CurrentADC.PropValue("numUseInput") = "2") or (CurrentQuestion.Type = "numeric-loop" and CurrentADC.PropValue("numUseInput") = "2")) Then %}
#adc_{%= CurrentADC.InstanceId %} input[type=number] {
    display: none;
}
{% EndIf %}
{% If (CurrentQuestion.Type = "single" or CurrentQuestion.Type = "multiple" or CurrentQuestion.Type = "single-loop" or CurrentQuestion.Type = "multiple-loop" ) Then %}
#adc_{%= CurrentADC.InstanceId %} {
    width: 100%;
    max-width: {%= CurrentADC.PropValue("maxWidth") %};
    margin: {%= controlAlign %};
    {% If (CurrentQuestion.Type = "single" and CurrentADC.PropValue("useList") = "1") or (CurrentQuestion.Type = "single-loop" and CurrentADC.PropValue("useList") = "1") Then %}
    text-align: {%= CurrentADC.PropValue("controlAlign") %};
    {% EndIf %}
}
{% EndIf %}
{% If (CurrentQuestion.Type = "datetime" ) Then %}
#adc_{%= CurrentADC.InstanceId %} .RLDatePicker,
#adc_{%= CurrentADC.InstanceId %} .RLTimePicker {
    margin: {%= controlAlign %};
}
#adc_{%= CurrentADC.InstanceId %} .RLTimePicker select:not([disabled=disabled]) {
    color: rgba({%= Theme.BlackColor %}) !important;
    background-color: rgba({%= Theme.WhiteColor %}) !important;
}
#adc_{%= CurrentADC.InstanceId %} .RLTimePicker,
#adc_{%= CurrentADC.InstanceId %} .RLTimePicker option,
#adc_{%= CurrentADC.InstanceId %} select option {
    color: rgba({%= Theme.BlackColor %}) !important;
    background-color: rgba({%= Theme.WhiteColor %}) !important;
}
#adc_{%= CurrentADC.InstanceId %} .RLTimePicker option:disabled {
    color: rgba({%= Theme.BlackColor.ToRGB() %},.5) !important;
    background-color: rgba({%= Theme.WhiteColor %}) !important;
}
{% EndIf %}
#adc_{%= CurrentADC.InstanceId %} select,
#adc_{%= CurrentADC.InstanceId %} select:focus::-ms-value{
    color: rgba({%= Theme.BlackColor %}) !important;
    background-color: rgba({%= Theme.WhiteColor %}) !important;
}
#adc_{%= CurrentADC.InstanceId %} option:disabled {
    color: rgba({%= Theme.BlackColor.ToRGB() %},.5) !important;
    background-color: rgba({%= Theme.WhiteColor %}) !important;
}
@media screen and (max-width: 800px) {
    #adc_{%= CurrentADC.InstanceId%} .askia-response:hover {
        background-color: transparent;
    }
}
#adc_{%= CurrentADC.InstanceId%} .askia-response img {
	max-width:100%;
}
#adc_{%= CurrentADC.InstanceId %} input[readonly=readonly],
#adc_{%= CurrentADC.InstanceId %} textarea[readonly=readonly],
#adc_{%= CurrentADC.InstanceId %} .RLTimePicker select[disabled=disabled],
#adc_{%= CurrentADC.InstanceId %} .RLTimePicker select[disabled=disabled] + span[class^="timeSeparator_"],
#adc_{%= CurrentADC.InstanceId %} .RLTimePicker select[disabled=disabled] + .secsContainer span[class^="timeSeparator_"],
#adc_{%= CurrentADC.InstanceId %} input[readonly=readonly] + .imperial {
    background-color: rgba({%= Theme.BlackColor.ToRGB() %},0.05) !important;
}

{% If (CurrentADC.PropValue("columnsCount").ToNumber() > 1 ) Then %}
#adc_{%= CurrentADC.InstanceId%} ul {
    -webkit-columns: {%= CurrentADC.PropValue("columnsWidth") %} {%= CurrentADC.PropValue("columnsCount") %};
    -moz-columns: {%= CurrentADC.PropValue("columnsWidth") %} {%= CurrentADC.PropValue("columnsCount") %};
    columns: {%= CurrentADC.PropValue("columnsWidth") %} {%= CurrentADC.PropValue("columnsCount") %};
}
{% EndIf %}

{% If (CurrentADC.PropValue("numUseInput") = "1") Then %}
#adc_{%= CurrentADC.InstanceId %} .numeric .suffix {
  min-width: 50px;
}
{% EndIf %}

#adc_{%= CurrentADC.InstanceId %} input[type=range] {
  border-radius: {%= Theme.BorderRadius %};
}
#adc_{%= CurrentADC.InstanceId %} .range:after,
#adc_{%= CurrentADC.InstanceId %} .range:before {
    font-size: {%= Theme.SmallFS %};
    color: rgb({%= Theme.NeutralDarkColor.ToRGB() %});
}
#adc_{%= CurrentADC.InstanceId %} input[type=range]::-webkit-slider-runnable-track {
  width: 100%;
  height: 8px;
  cursor: pointer;
  border-radius: {%= Theme.BorderRadius %};
  border: 0px solid #010101;
}
#adc_{%= CurrentADC.InstanceId %} input[type=range]::-webkit-slider-thumb {
  position: relative;
  border: 1px solid rgb({%= Theme.NeutralDarkColor.ToRGB() %});
  height: 26px;
  width: 26px;
  border-radius: 50%;
  background-color: rgb({%= Theme.NeutralLightColor.ToRGB() %});
  top: -9px;
  cursor: ew-resize;
  -webkit-appearance: none;
}
#adc_{%= CurrentADC.InstanceId %} input[type=range].selected::-webkit-slider-thumb {
    border: 1px solid rgb({%= Theme.SecondaryColor.ToRGB() %});
    background-color: rgb({%= Theme.SecondaryColor.ToRGB() %});
}
@supports (-ms-ime-align: auto) {
 #adc_{%= CurrentADC.InstanceId %} input[type=range]::-ms-thumb {
        margin-top: 0px;
  }
}
#adc_{%= CurrentADC.InstanceId %} input[type=range]::-moz-range-track {
  width: 100%;
  height: 8px;
  cursor: pointer;
  border-radius: {%= Theme.BorderRadius %};
  border: 0px solid rgb({%= Theme.NeutralDarkColor.ToRGB() %});
}
#adc_{%= CurrentADC.InstanceId %} input[type=range]::-moz-range-thumb {
  border: 1px solid rgb({%= Theme.NeutralDarkColor.ToRGB() %});
  height: 26px;
  width: 26px;
  border-radius: 50%;
  background: rgb({%= Theme.NeutralLightColor.ToRGB() %});
  cursor: ew-resize;
}
#adc_{%= CurrentADC.InstanceId %} input[type=range].selected::-moz-range-thumb {
    border: 1px solid rgb({%= Theme.SecondaryColor.ToRGB() %});
    background: rgb({%= Theme.SecondaryColor.ToRGB() %});
}
#adc_{%= CurrentADC.InstanceId %} input[type=range]::-ms-track {
  width: 100%;
  height: 8px;
  cursor: pointer;
  background: transparent;
  border-color: transparent;
  color: transparent;
  border-radius: {%= Theme.BorderRadius %};
}
#adc_{%= CurrentADC.InstanceId %} input[type=range]::-ms-fill-lower {
  height: 8px;
  border: 0px solid rgb({%= Theme.NeutralDarkColor.ToRGB() %});
  -webkit-border-top-left-radius: {%= Theme.BorderRadius %};
  -webkit-border-bottom-left-radius: {%= Theme.BorderRadius %};
  -moz-border-radius-topleft: {%= Theme.BorderRadius %};
  -moz-border-radius-bottomleft: {%= Theme.BorderRadius %};
  border-top-left-radius: {%= Theme.BorderRadius %};
  border-bottom-left-radius: {%= Theme.BorderRadius %};
}
#adc_{%= CurrentADC.InstanceId %} input[type=range]::-ms-fill-upper {
  height: 8px;
  border: 0px solid rgb({%= Theme.NeutralDarkColor.ToRGB() %});
  -webkit-border-top-right-radius: {%= Theme.BorderRadius %};
  -webkit-border-bottom-right-radius: {%= Theme.BorderRadius %};
  -moz-border-radius-topright: {%= Theme.BorderRadius %};
  -moz-border-radius-bottomright: {%= Theme.BorderRadius %};
  border-top-right-radius: {%= Theme.BorderRadius %};
  border-bottom-right-radius: {%= Theme.BorderRadius %};
}
#adc_{%= CurrentADC.InstanceId %} input[type=range]::-ms-thumb {
  border: 1px solid rgb({%= Theme.NeutralDarkColor.ToRGB() %});
  height: 26px;
  width: 26px;
  border-radius: 50%;
  background: rgb({%= Theme.NeutralLightColor.ToRGB() %});
  cursor: ew-resize;
}
#adc_{%= CurrentADC.InstanceId %} input[type=range].selected::-ms-thumb {
    border: 1px solid rgb({%= Theme.SecondaryColor.ToRGB() %});
    background: rgb({%= Theme.SecondaryColor.ToRGB() %});
}
{% If (CurrentADC.PropValue("numUseInput") = "1") Then %}
#adc_{%= CurrentADC.InstanceId %} [id^=askia-input-number]:not(.dkbutton) {
    display: none;
}
#adc_{%= CurrentADC.InstanceId %} label.numericDK, label.numericDK {
    display: inline-block;
}
#adc_{%= CurrentADC.InstanceId %} .range + .suffix {
  	min-width: 50px;
    display: inline-block;
    text-align: right;
}
{% EndIf %}
#adc_{%= CurrentADC.InstanceId %} .preBar {
    height: 8px;
    line-height: 8px;
    border-radius: {%= Theme.BorderRadius %};
}

#adc_{%= CurrentADC.InstanceId %} .selected + .preBar {
    background-color: rgb({%= Theme.SecondaryColor.ToRGB() %});
}

/** Chrome*/
@media screen and (-webkit-min-device-pixel-ratio:0) {
    #adc_{%= CurrentADC.InstanceId %} input[type='range']::-webkit-slider-runnable-track {
      background-color: rgb({%= Theme.NeutralLightColor.ToRGB() %});
    }
}
/** FF*/
#adc_{%= CurrentADC.InstanceId %} input[type="range"]::-moz-range-progress {
  /** Selected color */
  height: 8px;
  border-radius: {%= Theme.BorderRadius %};
}
#adc_{%= CurrentADC.InstanceId %} input[type="range"].selected::-moz-range-progress {
  /** Selected color */
  background-color: rgb({%= Theme.SecondaryColor.ToRGB() %});
}
#adc_{%= CurrentADC.InstanceId %} input[type="range"]::-moz-range-track {
  background-color: rgb({%= Theme.NeutralLightColor.ToRGB() %});
}
/* IE*/
#adc_{%= CurrentADC.InstanceId %} input[type="range"]::-ms-fill-lower {
  /** Selected color */
  background-color: rgb({%= Theme.NeutralLightColor.ToRGB() %});
}
#adc_{%= CurrentADC.InstanceId %} input[type="range"].selected::-ms-fill-lower {
  /** Selected color */
  background-color: rgb({%= Theme.SecondaryColor.ToRGB() %});
}
#adc_{%= CurrentADC.InstanceId %} input[type="range"]::-ms-fill-upper {
  background-color: rgb({%= Theme.NeutralLightColor.ToRGB() %});
}

#picker{%= CurrentADC.InstanceId %} .is-today .pika-button {
    color: rgba({%= Theme.SecondaryColor %}) !important;
}
#picker{%= CurrentADC.InstanceId %} .is-selected .pika-button,
#picker{%= CurrentADC.InstanceId %} .is-inrange .pika-button,
#picker{%= CurrentADC.InstanceId %} .is-startrange .pika-button,
#picker{%= CurrentADC.InstanceId %} .is-endrange .pika-button {
    background-color: rgba({%= Theme.SecondaryColor %}) !important;
    color: rgba(255,255,255,1) !important;
}
#picker{%= CurrentADC.InstanceId %} .pika-button:hover {
    background-color: rgba({%= Theme.PrimaryColor %}) !important;
    color: rgba(255,255,255,1) !important;
}

#adc_{%= CurrentADC.InstanceId%} .responseHeader
{
  font-weight:bold;
  cursor: pointer;
  color: rgb({%= headerFontColour.ToRGB() %})
}

#adc_{%= CurrentADC.InstanceId%} .disabled{
  color: grey;
}

#adc_{%= CurrentADC.InstanceId%} .multiSelect
{
  height: auto !important;
}
